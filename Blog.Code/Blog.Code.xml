<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Blog.Code</name>
    </assembly>
    <members>
        <member name="T:Blog.Code.AOP.BlogCacheAOP">
            <summary>
            面向切面的缓存使用
            </summary>
        </member>
        <member name="M:Blog.Code.AOP.BlogCacheAOP.#ctor(Blog.Code.AOP.ICaching)">
            <summary>
            构造方法
            </summary>
            <param name="cache"></param>
        </member>
        <member name="M:Blog.Code.AOP.BlogCacheAOP.Intercept(Castle.DynamicProxy.IInvocation)">
            <summary>
            Intercept方法是拦截的关键所在，也是IInterceptor接口中的唯一定义
            </summary>
        </member>
        <member name="T:Blog.Code.AOP.BlogLogAOP">
            <summary>
            拦截器BlogLogAOP 继承IInterceptor接口
            </summary>
        </member>
        <member name="M:Blog.Code.AOP.BlogLogAOP.Intercept(Castle.DynamicProxy.IInvocation)">
            <summary>
            实例化IInterceptor唯一方法 
            </summary>
            <param name="invocation">包含被拦截方法的信息</param>
        </member>
        <member name="T:Blog.Code.AOP.ICaching">
            <summary>
            简单的缓存接口，只有查询和添加，以后会进行扩展
            </summary>
        </member>
        <member name="M:Blog.Code.AOP.ICaching.Get(System.String)">
            <summary>
            get
            </summary>
            <param name="cacheKey"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Code.AOP.ICaching.Set(System.String,System.Object)">
            <summary>
            set
            </summary>
            <param name="cacheKey"></param>
            <param name="cacheValue"></param>
        </member>
        <member name="T:Blog.Code.AOP.MemoryCaching">
            <summary>
            实例化缓存接口ICaching
            </summary>
        </member>
        <member name="M:Blog.Code.AOP.MemoryCaching.#ctor(Microsoft.Extensions.Caching.Memory.IMemoryCache)">
            <summary>
            通过构造方法获取
            </summary>
            <param name="cache"></param>
        </member>
        <member name="M:Blog.Code.AOP.MemoryCaching.Get(System.String)">
            <summary>
            get
            </summary>
            <param name="cacheKey"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Code.AOP.MemoryCaching.Set(System.String,System.Object)">
            <summary>
            set
            </summary>
            <param name="cacheKey"></param>
            <param name="cacheValue"></param>
        </member>
        <member name="T:Blog.Code.AuthHelper.BlogCoreToken">
            <summary>
            
            </summary>
        </member>
        <member name="M:Blog.Code.AuthHelper.BlogCoreToken.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Blog.Code.AuthHelper.BlogCoreToken.IssueJWT(Blog.Core.Model.TokenModel,System.TimeSpan,System.TimeSpan)">
            <summary>
            获取JWT字符串并存入缓存
            </summary>
            <param name="tokenModel"></param>
            <param name="expiresSliding"></param>
            <param name="expiresAbsoulte"></param>
            <returns></returns>
        </member>
        <member name="T:Blog.Code.AuthHelper.OverWrite.JwtHelper">
            <summary>
            令牌类
            </summary>
        </member>
        <member name="P:Blog.Code.AuthHelper.OverWrite.JwtHelper.secretKey">
            <summary>
            secretKey
            </summary>
        </member>
        <member name="M:Blog.Code.AuthHelper.OverWrite.JwtHelper.IssueJWT(Blog.Core.Model.TokenModel)">
            <summary>
            获取JWT字符串
            </summary>
            <param name="tokenModel"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Code.AuthHelper.OverWrite.JwtHelper.SerializeJWT(System.String)">
            <summary>
            解析 jwt
            </summary>
            <param name="jwtStr"></param>
            <returns></returns>
        </member>
        <member name="T:Blog.Code.AuthHelper.OverWrite.JwtTokenAuth">
            <summary>
            Token验证授权中间件
            </summary>
        </member>
        <member name="M:Blog.Code.AuthHelper.OverWrite.JwtTokenAuth.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            JwtTokenAuth
            </summary>
            <param name="next"></param>
        </member>
        <member name="M:Blog.Code.AuthHelper.OverWrite.JwtTokenAuth.Invoke(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            验证授权中间件
            </summary>
            <param name="httpContext"></param>
            <returns></returns>
        </member>
        <member name="T:Blog.Code.AuthHelper.RayPIMemoryCache">
            <summary>
            RayPIMemoryCache
            </summary>
        </member>
        <member name="F:Blog.Code.AuthHelper.RayPIMemoryCache._cache">
            <summary>
            MemoryCache
            </summary>
        </member>
        <member name="M:Blog.Code.AuthHelper.RayPIMemoryCache.Exists(System.String)">
            <summary>
            验证缓存项是否存在
            </summary>
            <param name="key">缓存Key</param>
            <returns></returns>
        </member>
        <member name="M:Blog.Code.AuthHelper.RayPIMemoryCache.Get(System.String)">
            <summary>
            获取缓存
            </summary>
            <param name="key">缓存Key</param>
            <returns></returns>
        </member>
        <member name="M:Blog.Code.AuthHelper.RayPIMemoryCache.AddMemoryCache(System.String,System.Object,System.TimeSpan,System.TimeSpan)">
            <summary>
            添加缓存
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">缓存Value</param>
            <param name="expiresSliding">滑动过期时长（如果在过期时间内有操作，则以当前时间点延长过期时间）</param>
            <param name="expiressAbsoulte">绝对过期时长</param>
            <returns></returns>
        </member>
        <member name="T:Blog.Code.Controllers.BlogController">
            <summary>
            Blog控制器
            </summary>
        </member>
        <member name="M:Blog.Code.Controllers.BlogController.#ctor(IService.IAdvertisementServices,IService.IBlogArticleServices,Common.Redis.IRedisCacheManager)">
            <summary>
            构造方法注入
            </summary>
            <param name="advertisementServices"></param>
            <param name="blogArticleServices"></param>
            <param name="redisCacheManager"></param>
        </member>
        <member name="M:Blog.Code.Controllers.BlogController.GetSum(System.Int32,System.Int32)">
            <summary>
            获取和
            </summary>
            <param name="i"></param>
            <param name="j"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Code.Controllers.BlogController.GetAdvertisementInfo(System.Int32)">
            <summary>
            根据ID获取广告信息
            </summary>
            <param name="id">广告ID</param>
            <returns></returns>
        </member>
        <member name="M:Blog.Code.Controllers.BlogController.CreateTableByEntity">
            <summary>
            创建表
            </summary>
        </member>
        <member name="M:Blog.Code.Controllers.BlogController.GetBlogs">
            <summary>
            获取博客列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Blog.Code.Controllers.BlogController.GetBlogDetailsAsync(System.Int32)">
            <summary>
            获取视图博客详情信息
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Blog.Code.Controllers.LoginController">
            <summary>
            Login
            </summary>
        </member>
        <member name="M:Blog.Code.Controllers.LoginController.GetJwtStr(System.Int64,System.String)">
            <summary>
            登陆
            </summary>
            <param name="id"></param>
            <param name="sub"></param>
            <returns></returns>
        </member>
        <member name="M:Blog.Code.Controllers.LoginController.GetJWTStr(System.Int64,System.String,System.Int32,System.Int32)">
            <summary>
            获取JWT，并存入缓存
            </summary>
            <param name="id">用户Id</param>
            <param name="sub">身份</param>
            <param name="expiresSliding">相对过期时间，单位为分</param>
            <param name="expiresAbsoulute">绝对过期时间，单位为天</param>
            <returns></returns>
        </member>
        <member name="M:Blog.Code.Controllers.LoginController.Getjsonp(System.String,System.Int64,System.String,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="callBack"></param>
            <param name="id"></param>
            <param name="sub"></param>
            <param name="expiresSliding"></param>
            <param name="expiresAbsoulute"></param>
        </member>
        <member name="T:Blog.Code.Program">
            <summary>
            Program类
            </summary>
        </member>
        <member name="M:Blog.Code.Program.Main(System.String[])">
            <summary>
            Main
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Blog.Code.Program.BuildWebHost(System.String[])">
            <summary>
            Web程序需要一个宿主
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:Blog.Code.Startup">
            <summary>
            Startup类
            </summary>
        </member>
        <member name="M:Blog.Code.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            构造方法
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="P:Blog.Code.Startup.Configuration">
            <summary>
            Configuration 属性
            </summary>
        </member>
        <member name="M:Blog.Code.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            This method gets called by the runtime. Use this method to add services to the container.
            中间件注入
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:Blog.Code.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IHostingEnvironment)">
            <summary>
             This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
             请求具体处理方式
            </summary>
            <param name="app"></param>
            <param name="env"></param>
        </member>
    </members>
</doc>
